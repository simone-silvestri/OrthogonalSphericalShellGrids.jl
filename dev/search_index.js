var documenterSearchIndex = {"docs":
[{"location":"grids/#sec:API","page":"API","title":"List of functions in OrthogonalSphericalShellGrids","text":"","category":"section"},{"location":"grids/","page":"API","title":"API","text":"Modules = [ OrthogonalSphericalShellGrids ]","category":"page"},{"location":"grids/#OrthogonalSphericalShellGrids.Tripolar","page":"API","title":"OrthogonalSphericalShellGrids.Tripolar","text":"a structure to represent a tripolar grid on a spherical shell \n\n\n\n\n\n","category":"type"},{"location":"grids/#OrthogonalSphericalShellGrids.TripolarGrid","page":"API","title":"OrthogonalSphericalShellGrids.TripolarGrid","text":"TripolarGrid(arch = CPU(), FT::DataType = Float64; \n                  size, \n                  southermost_latitude = -80, \n                  halo                 = (4, 4, 4), \n                  radius               = R_Earth, \n                  z                    = (0, 1),\n                  north_poles_latitude = 45,\n                  first_pole_longitude = 0)\n\nConstructs a tripolar grid on a spherical shell.\n\nPositional Arguments\n\narch: The architecture to use for the grid. Default is CPU().\nFT::DataType: The data type to use for the grid. Default is Float64.\n\nKeyword Arguments\n\nsize: The number of cells in the (longitude, latitude, z) dimensions.\nsouthermost_latitude: The southernmost Center latitude of the grid. Default is -80.\nhalo: The halo size in the (longitude, latitude, z) dimensions. Default is (4, 4, 4).\nradius: The radius of the spherical shell. Default is R_Earth.\nz: The z-coordinate range of the grid. Default is (0, 1).\nfirst_pole_longitude: The longitude of the first `north'' singularity.                          The second singularity will be located atfirstpolelongitude + 180ᵒ`.\nnorth_poles_latitude: The latitude of the ``north'' singularities.\n\nReturns\n\nAn OrthogonalSphericalShellGrid object representing a tripolar grid on the sphere.  The north singularities are located at \n\ni = 1, j = Nφ and i = Nλ ÷ 2 + 1, j = Nλ \n\n\n\n\n\n","category":"type"},{"location":"grids/#OrthogonalSphericalShellGrids.ZipperBoundaryCondition","page":"API","title":"OrthogonalSphericalShellGrids.ZipperBoundaryCondition","text":"ZipperBoundaryCondition(sign = 1)\n\nCreate a zipper boundary condition specific to the TripolarGrid. A Zipper boundary condition is similar to a periodic boundary condition, but, instead of retrieving the value from the opposite boundary,  it splits the boundary in two and retrieves the value from the opposite side of the boundary.  It is possible to think of it as a periodic boundary over a folded domain.\n\nWhen copying in halos, folded velocities need to switch sign, while tracers or similar fields do not.\n\nNote: the Tripolar boundary condition is particular because the last grid point at the north edge is repeated for  tracers. For this reason we do not start copying the halo from the last grid point but from the second to last grid point.\n\nExample\n\nConsider the northern edge of a tripolar grid where P indicates the j - location of the poles\n\n                  P                         P\n                  |            |            |            |            \n Ny (center) ->   u₁    c₁     u₂    c₂     u₃    c₃     u₄    c₄     \n Ny (face)   ->   |---- v₁ ----|---- v₂ ----|---- v₃ ----|---- v₄ ----\n                                                      Nx    Nx\n                                                    (face) (center)\n\nThe grid ends at Ny because it is periodic in nature, but, given the fold, \n\nc₁ ==   c₄\n\nand\n\nc₂ ==  c₃\n\nThis is not the case for the v-velocity (or any field on the j-faces) where the last grid point is not repeated.\n\n\n\n\n\n","category":"function"},{"location":"grids/#OrthogonalSphericalShellGrids._compute_tripolar_coordinates!-Tuple{Any}","page":"API","title":"OrthogonalSphericalShellGrids._compute_tripolar_coordinates!","text":"_compute_tripolar_coordinates!(λFF, φFF, λFC, φFC, λCF, φCF, λCC, φCC, \n                               λᶠᵃᵃ, λᶜᵃᵃ, φᵃᶠᵃ, φᵃᶜᵃ, \n                               first_pole_longitude,\n                               focal_distance, Nλ)\n\nCompute the tripolar coordinates for a given set of input parameters. This function follows the formulation described in  Ross J. Murray, \"Explicit Generation of Orthogonal Grids for Ocean Models\", Journal of Computational Physics, Volume 126, Issue 2, 1996, Pages 251-273.\n\nThe tripolar grid is built as a set of cofocal ellipsed and perpendicular hyperbolae. The focal_distance argument is the distance from the center of the ellipses to the foci.\n\nThe family of ellipses obeys:\n\n       x²          y²\n   --------- + ---------  = 1\n   a²cosh²(ψ)  a²sinh²(ψ)\n\nWhile the family of perpendicular hyperbolae obey:\n\n       x²          y²\n   --------- + ---------  = 1\n   a²cos²(λ)   a²sin²(λ)\n\nWhere a is the focal_distance to the center. λ is the longitudinal angle and ψ is the ``isometric latitude''  defined by Murray (1996) as satisfying:\n\n    a sinh(ψ) = tand((90 - φ) / 2) \n\nThe final (x, y) points that define the stereographic projection of the tripolar coordinates are given by:\n\n    x = a * sinh(ψ) * cos(λ)\n    y = a * sinh(ψ) * sin(λ)\n\nfor which it is possible to retrive the longitude and latitude by:\n\n    λ = - 180 / π * atan(y / x)\n    φ = 90 - 360 / π * atan(sqrt(y² + x²))\n\n\n\n\n\n","category":"method"},{"location":"#OrthogonalSphericalShellGrids.jl","page":"Home","title":"OrthogonalSphericalShellGrids.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OrthogonalSphericalShellGrids.jl","category":"page"}]
}
